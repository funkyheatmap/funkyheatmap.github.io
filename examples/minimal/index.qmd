---
title: Minimal reproducible example
---

## funkyheatmap in R
```{r include=FALSE, warnings=FALSE}
library(dplyr)

dir <- "."
# dir <- "examples/minimal"

data <- readr::read_tsv(paste0(dir, "/data/data.tsv")) %>%
  mutate_at(
    c("categories1", "categories2", "categories3"),
    function(column) {
      lapply(column, function(val) {
        unlist(jsonlite::fromJSON(val))
      })
    }
  ) %>%
  mutate_at(vars(ends_with("_str")), as.character)
column_info <- readr::read_tsv(paste0(dir, "/data/column_info.tsv"))
column_groups <- readr::read_tsv(paste0(dir, "/data/column_groups.tsv"))
row_info <- readr::read_tsv(paste0(dir, "/data/row_info.tsv"))
row_groups <- readr::read_tsv(paste0(dir, "/data/row_groups.tsv"))
palettes <- jsonlite::read_json(paste0(dir, "/data/palettes.json"), simplifyVector = TRUE)
palettes$pie <- unlist(palettes$pie)
```

```{r}
g <- funkyheatmap::funky_heatmap(
  data = data,
  column_info = column_info,
  column_groups = column_groups,
  row_info = row_info,
  row_groups = row_groups,
  palettes = palettes
)
```

```{r include=FALSE}
knitr::opts_chunk$set(fig.width = g$width, fig.height = g$height)
```

```{r}
g
```

## funkyheatmap-js in JavaScript

```{r echo=FALSE}
ojs_define(
  funky_heatmap_args = list(
    data = data,
    column_info = column_info,
    column_groups = column_groups,
    row_info = row_info,
    row_groups = row_groups,
    palettes = palettes,
    # TODO: these parameters should be optional
    columns = column_info$id,
    expand = c(xmax = 3),
    col_annot_offset = 5,
    add_abc = FALSE,
    scale_column = FALSE
  )
)
```

```{ojs}
//| echo: false
//| panel: input
//| layout-ncol: 2
viewof color_by_rank = Inputs.toggle({label: "Color by rank"})
viewof scale_column = Inputs.toggle({label: "Minmax column"})
```


```{ojs}
funkyheatmap(
  funky_heatmap_args.data,
  // TODO: remove columns, since this information is available in column info
  funky_heatmap_args.columns,
  funky_heatmap_args.column_info,
  funky_heatmap_args.column_groups,
  // TODO: uncomment row_info and row_groups
  // funky_heatmap_args.row_info,
  // funky_heatmap_args.row_groups,
  funky_heatmap_args.palettes,
  // TODO: align the parameters below with R
  funky_heatmap_args.expand, 
  funky_heatmap_args.col_annot_offset,
  funky_heatmap_args.add_abc,
  scale_column,
  {
    fontSize: 14,
    rowHeight: 26,
    rootStyle: 'max-width: none',
    colorByRank: color_by_rank,
    theme: {
        oddRowBackground: 'var(--bs-body-bg)',
        evenRowBackground: 'var(--bs-button-hover)',
        textColor: 'var(--bs-body-color)',
        strokeColor: 'var(--bs-body-color)',
        headerColor: 'var(--bs-white)',
        hoverColor: 'var(--bs-body-color)'
    }
  }
);
```

```{ojs}
//| echo: false
funkyheatmap = (await require('d3@7').then(d3 => {
  window.d3 = d3;
  window._ = _;
  return import('https://unpkg.com/funkyheatmap-js@0.1.8');
})).default;
```

## funkyheatmappy in Python

```{python include=FALSE}
from funkyheatmappy import funkyheatmap
import pandas as pd
import json

data = pd.read_csv("data/data.tsv", delimiter="\t")
for json_col in ["categories1", "categories2", "categories3"]:
  data[json_col] = [ json.loads(s) for s in data[json_col] ]
column_info = pd.read_csv("data/column_info.tsv", delimiter="\t")
column_groups = pd.read_csv("data/column_groups.tsv", delimiter="\t")
row_info = pd.read_csv("data/row_info.tsv", delimiter="\t")
row_groups = pd.read_csv("data/row_groups.tsv", delimiter="\t")
with open("data/palettes.json") as f:
  palettes = json.load(f)
```

```{python}
# TODO: remove workaround
column_info.index = column_info["id"]
column_info["name"] = [ "" if not isinstance(name, str) else name for name in column_info["name"] ]
row_info.index = row_info["id"]

# TODO: rename function to `funky_heatmap()`
funkyheatmap(
  data=data,
  column_info=column_info,
  column_groups=column_groups,
  row_info=row_info,
  row_groups=row_groups,
  palettes=palettes,
)
```